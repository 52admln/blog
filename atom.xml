<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>52admin</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://note.52admin.net/"/>
  <updated>2019-01-08T03:04:39.203Z</updated>
  <id>https://note.52admin.net/</id>
  
  <author>
    <name>52admin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Service Worker 学习记录</title>
    <link href="https://note.52admin.net/2018/09/10/Service-Worker-%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://note.52admin.net/2018/09/10/Service-Worker-学习记录/</id>
    <published>2018-09-10T13:43:55.000Z</published>
    <updated>2019-01-08T03:04:39.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Service-Worker-学习记录"><a href="#Service-Worker-学习记录" class="headerlink" title="Service Worker 学习记录"></a>Service Worker 学习记录</h2><h3 id="能干什么？"><a href="#能干什么？" class="headerlink" title="能干什么？"></a>能干什么？</h3><ol><li>后台消息传递</li><li>网络代理，转发请求，伪造响应</li><li>离线缓存</li><li>消息推送</li></ol><p>对于并发高的活动页面，缓存图片文件和js文件，达到减轻服务器负担的作用。</p><a id="more"></a><h3 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h3><h4 id="页面中注册-Service-Worker"><a href="#页面中注册-Service-Worker" class="headerlink" title="页面中注册 Service Worker"></a>页面中注册 Service Worker</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (navigator.serviceWorker) &#123;</span><br><span class="line">    navigator.serviceWorker.register(<span class="string">'service-worker.js'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">registration</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'service worker 注册成功'</span>);</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'servcie worker 注册失败'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缓存文件"><a href="#缓存文件" class="headerlink" title="缓存文件"></a>缓存文件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cacheFiles = [</span><br><span class="line">  <span class="string">'5BB072CAB1104C1F2E254F7F0EC0EB70.jpg'</span>,</span><br><span class="line">  <span class="string">'main.js'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">var</span> VERSION = <span class="string">'v1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存</span></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.waitUntil(</span><br><span class="line">    caches.open(VERSION).then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> cache.addAll(cacheFiles);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="更新版本"><a href="#更新版本" class="headerlink" title="更新版本"></a>更新版本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存更新</span></span><br><span class="line">self.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.waitUntil(</span><br><span class="line">    caches.keys().then(<span class="function"><span class="keyword">function</span>(<span class="params">cacheNames</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">        cacheNames.map(<span class="function"><span class="keyword">function</span>(<span class="params">cacheName</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 如果当前版本和缓存版本不一致</span></span><br><span class="line">          <span class="keyword">if</span> (cacheName !== VERSION) &#123;</span><br><span class="line">            <span class="keyword">return</span> caches.delete(cacheName);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="缓存文件请求拦截"><a href="#缓存文件请求拦截" class="headerlink" title="缓存文件请求拦截"></a>缓存文件请求拦截</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存图片</span></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">  evt.respondWith(</span><br><span class="line">    caches.match(evt.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response) &#123;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> request = evt.request.clone();</span><br><span class="line">      <span class="keyword">return</span> fetch(request).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!response &amp;&amp; response.status !== <span class="number">200</span> &amp;&amp; !response.headers.get(<span class="string">'Content-type'</span>).match(<span class="regexp">/image/</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> responseClone = response.clone();</span><br><span class="line">        caches.open(<span class="string">'my-test-cache-v1'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">cache</span>) </span>&#123;</span><br><span class="line">          cache.put(evt.request, responseClone);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>需要 <code>https</code> 才可以使用，但是 <code>localhost 或 127.0.0.1</code> 除外。</li><li>生命周期为： installing、installed、activating、activated</li><li>浏览器支持情况桌面端Chrome和Firefox可用，IE不可用。移动端Chrome可用</li><li>在微信上的支持情况，iOS设备不支持，安卓支持</li><li>只需要更新 <code>service-worker</code>的注册文件，更换版本，即可更新资源</li></ol><h3 id="参考地址："><a href="#参考地址：" class="headerlink" title="参考地址："></a>参考地址：</h3><ul><li>借助Service Worker和cacheStorage缓存及离线开发：<a href="https://www.zhangxinxu.com/wordpress/2017/07/service-worker-cachestorage-offline-develop/" target="_blank" rel="noopener">https://www.zhangxinxu.com/wordpress/2017/07/service-worker-cachestorage-offline-develop/</a></li><li>Service Worker初体验：<a href="http://www.alloyteam.com/2016/01/9274/" target="_blank" rel="noopener">http://www.alloyteam.com/2016/01/9274/</a></li><li>Service Worker那些事：<a href="https://zhuanlan.zhihu.com/p/20040372" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/20040372</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Service-Worker-学习记录&quot;&gt;&lt;a href=&quot;#Service-Worker-学习记录&quot; class=&quot;headerlink&quot; title=&quot;Service Worker 学习记录&quot;&gt;&lt;/a&gt;Service Worker 学习记录&lt;/h2&gt;&lt;h3 id=&quot;能干什么？&quot;&gt;&lt;a href=&quot;#能干什么？&quot; class=&quot;headerlink&quot; title=&quot;能干什么？&quot;&gt;&lt;/a&gt;能干什么？&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;后台消息传递&lt;/li&gt;
&lt;li&gt;网络代理，转发请求，伪造响应&lt;/li&gt;
&lt;li&gt;离线缓存&lt;/li&gt;
&lt;li&gt;消息推送&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于并发高的活动页面，缓存图片文件和js文件，达到减轻服务器负担的作用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="pwa" scheme="https://note.52admin.net/tags/pwa/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 使用 Swiper.js 在 iOS &lt; 11 时出现错误</title>
    <link href="https://note.52admin.net/2018/09/10/Vue-js-%E4%BD%BF%E7%94%A8-Swiper-js-%E5%9C%A8-iOS%E5%B0%8F%E4%BA%8E11-%E6%97%B6%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF/"/>
    <id>https://note.52admin.net/2018/09/10/Vue-js-使用-Swiper-js-在-iOS小于11-时出现错误/</id>
    <published>2018-09-10T10:03:58.000Z</published>
    <updated>2019-01-08T03:04:39.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在H5项目中，需要用到翻页效果，通过 Swiper 来实现，安装 Swiper</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i swiper -S</span><br></pre></td></tr></table></figure><p>但是实际使用中，发现低版本 iOS &lt; 11 会出现下面这个错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Unexpected keyword &apos;const&apos;. Const declarations are not supported in strict mode.</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Swiper.js 这个 npm 包里面还使用了 <code>dom7</code> 和 <code>ssr-window</code>，所以需要对这两个插件进行 Babel 转 ES5</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>Vue CLI 2.x 下，在 build/webpack.base.config.js 文件中修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">modules: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        include: [</span><br><span class="line">            resolve(<span class="string">'src'</span>), </span><br><span class="line">            resolve(<span class="string">'test'</span>),</span><br><span class="line">            resolve(<span class="string">'node_modules/swiper/dist/js/'</span>),</span><br><span class="line">            resolve(<span class="string">'node_modules/webpack-dev-server/client'</span>),</span><br><span class="line">            <span class="comment">// 新增</span></span><br><span class="line">            resolve(<span class="string">'node_modules/swiper'</span>),</span><br><span class="line">            resolve(<span class="string">'node_modules/dom7'</span>),</span><br><span class="line">            resolve(<span class="string">'node_modules/ssr-window'</span>)</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>Vue CLI 3.x 下</p><p>在 <code>vue.config.js</code> 中增加 <code>transpileDependencies</code> 配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    transpileDependencies: [</span><br><span class="line">        &quot;swiper&quot;,</span><br><span class="line">        &quot;dom7&quot;,</span><br><span class="line">        &quot;ssr-window&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：<a href="http://idangero.us/swiper/get-started/" target="_blank" rel="noopener">http://idangero.us/swiper/get-started/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在H5项目中，需要用到翻页效果，通过 Swiper 来实现，安装 Swiper&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i swiper -S&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是实际使用中，发现低版本 iOS &amp;lt; 11 会出现下面这个错误：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SyntaxError: Unexpected keyword &amp;apos;const&amp;apos;. Const declarations are not supported in strict mode.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Swiper" scheme="https://note.52admin.net/tags/Swiper/"/>
    
      <category term="Vue.js" scheme="https://note.52admin.net/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 移动端适配之 vw 解决方案</title>
    <link href="https://note.52admin.net/2018/09/03/Vue-js-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E4%B9%8B-vw-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://note.52admin.net/2018/09/03/Vue-js-移动端适配之-vw-解决方案/</id>
    <published>2018-09-03T10:55:08.000Z</published>
    <updated>2019-01-08T03:04:39.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装并配置PostCss插件"><a href="#1-安装并配置PostCss插件" class="headerlink" title="1. 安装并配置PostCss插件"></a>1. 安装并配置PostCss插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano --S</span><br></pre></td></tr></table></figure><p>还需要安装 cssnano-preset-advanced<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cssnano-preset-advanced --save-dev</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="2-对-PostCss-进行配置"><a href="#2-对-PostCss-进行配置" class="headerlink" title="2. 对 PostCss 进行配置"></a>2. 对 PostCss 进行配置</h2><p>找到在根目录中的<code>.postcssrc.js</code>，对PostCSS插件进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  &quot;plugins&quot;: &#123;</span><br><span class="line">    &quot;postcss-import&quot;: &#123;&#125;,</span><br><span class="line">    &quot;postcss-url&quot;: &#123;&#125;,</span><br><span class="line">    // to edit target browsers: use &quot;browserslist&quot; field in package.json</span><br><span class="line">    &quot;postcss-write-svg&quot;: &#123;</span><br><span class="line">      uft8: false</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;postcss-cssnext&quot;: &#123;&#125;,</span><br><span class="line">    &quot;postcss-px-to-viewport&quot;: &#123;</span><br><span class="line">      viewportWidth: 750, // 视窗的宽度，对应的是我们设计稿的宽度，一般是750</span><br><span class="line">      viewportHeight: 1334, // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span><br><span class="line">      unitPrecision: 3, // 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span><br><span class="line">      viewportUnit: &apos;vw&apos;, // 指定需要转换成的视窗单位，建议使用vw</span><br><span class="line">      selectorBlackList: [&apos;.ignore&apos;, &apos;.hairlines&apos;], // 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span><br><span class="line">      minPixelValue: 1, // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span><br><span class="line">      mediaQuery: false // 允许在媒体查询中转换`px`</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;postcss-viewport-units&quot;: &#123;&#125;,</span><br><span class="line">    &quot;cssnano&quot;: &#123;</span><br><span class="line">      preset: &quot;advanced&quot;,</span><br><span class="line">      autoprefixer: false, // 和cssnext同样具有autoprefixer，保留一个</span><br><span class="line">      &quot;postcss-zindex&quot;: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-引入viewport-units-buggyfill解决兼容问题"><a href="#3-引入viewport-units-buggyfill解决兼容问题" class="headerlink" title="3. 引入viewport-units-buggyfill解决兼容问题"></a>3. 引入viewport-units-buggyfill解决兼容问题</h2><p>在 <code>index.html</code> 中引入js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;//g.alicdn.com/fdilab/lib3rd/viewport-units-buggyfill/0.6.2/??viewport-units-buggyfill.hacks.min.js,viewport-units-buggyfill.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  window.onload = function () &#123; </span><br><span class="line">    window.viewportUnitsBuggyfill.init(&#123; hacks: window.viewportUnitsBuggyfillHacks &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4-遇到的问题及解决方案"><a href="#4-遇到的问题及解决方案" class="headerlink" title="4. 遇到的问题及解决方案"></a>4. 遇到的问题及解决方案</h2><ol><li>img图片不显示</li></ol><p>全局引入CSS样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123; <span class="attribute">content</span>: normal <span class="meta">!important</span>; &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>与第三方UI库兼容问题</li></ol><p>我这里使用了 Element 的 Mint-UI，在编译的过程中会出现这个错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> warning  <span class="keyword">in</span> ./node_modules/mint-ui/lib/style.css</span><br><span class="line"></span><br><span class="line">(Emitted value instead of an instance of Error) postcss-viewport-units: /Users/Wyj/Workspace/imglive/wx/node_modules/mint-ui/lib/style.css:267:1: <span class="string">'.mint-cell-allow-right::after'</span> already has a <span class="string">'content'</span> property, give up to overwrite it.</span><br><span class="line"></span><br><span class="line"> @ ./node_modules/mint-ui/lib/style.css 4:14-118 13:3-17:5 14:22-126</span><br><span class="line"> @ ./src/plugins/mint-ui/index.js</span><br><span class="line"> @ ./src/plugins/index.js</span><br><span class="line"> @ ./src/main.js</span><br><span class="line"> @ multi (webpack)-dev-server/client?http://0.0.0.0:8080 webpack/hot/dev-server ./src/main.js</span><br></pre></td></tr></table></figure><p>可通过自行修改 <code>postcss-px-to-viewport</code></p><p>在node_modules中找到 <code>postcss-px-to-viewport</code> ，打开<code>index.js</code><br>新增对exclude选项的处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">module.exports = postcss.plugin(&apos;postcss-px-to-viewport&apos;, function (options) &#123;</span><br><span class="line"></span><br><span class="line">  var opts = objectAssign(&#123;&#125;, defaults, options);</span><br><span class="line">  var pxReplace = createPxReplace(opts.viewportWidth, opts.minPixelValue, opts.unitPrecision, opts.viewportUnit);</span><br><span class="line"></span><br><span class="line">  return function (css) &#123;</span><br><span class="line"></span><br><span class="line">    css.walkDecls(function (decl, i) &#123;</span><br><span class="line">      if (options.exclude) &#123;  // 添加对exclude选项的处理</span><br><span class="line">        if (Object.prototype.toString.call(options.exclude) !== &apos;[object RegExp]&apos;) &#123;</span><br><span class="line">          throw new Error(&apos;options.exclude should be RegExp!&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">        if (decl.source.input.file.match(options.exclude) !== null) return;</span><br><span class="line">      &#125;</span><br><span class="line">      // This should be the fastest test and will remove most declarations</span><br><span class="line">      if (decl.value.indexOf(&apos;px&apos;) === -1) return;</span><br><span class="line"></span><br><span class="line">      if (blacklistedSelector(opts.selectorBlackList, decl.parent.selector)) return;</span><br><span class="line"></span><br><span class="line">      decl.value = decl.value.replace(pxRegex, pxReplace);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    if (opts.mediaQuery) &#123;</span><br><span class="line">      css.walkAtRules(&apos;media&apos;, function (rule) &#123;</span><br><span class="line">        if (rule.params.indexOf(&apos;px&apos;) === -1) return;</span><br><span class="line">        rule.params = rule.params.replace(pxRegex, pxReplace);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后在 <code>.postcssrc.js</code> 添加 <code>postcss-px-to-viewport</code> 的 <code>exclude</code> 选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&quot;postcss-px-to-viewport&quot;: &#123;</span><br><span class="line">  viewportWidth: 750,</span><br><span class="line">  viewportHeight: 1334,</span><br><span class="line">  unitPrecision: 3,</span><br><span class="line">  viewportUnit: &apos;vw&apos;,</span><br><span class="line">  selectorBlackList: [&apos;.ignore&apos;, &apos;.hairlines&apos;],</span><br><span class="line">  minPixelValue: 1,</span><br><span class="line">  mediaQuery: false,</span><br><span class="line">  exclude: /(\/|\\)(node_modules)(\/|\\)/</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>或者使用改良版的  <code>postcss-px-to-viewport-opt</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-px-to-viewport-opt -S</span><br></pre></td></tr></table></figure><p>然后在 <code>.postcssrc.js</code> 配置 <code>postcss-px-to-viewport-opt</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&apos;postcss-px-to-viewport-opt&apos;: &#123;</span><br><span class="line">  viewportWidth: 375, // 视窗的宽度，对应的是我们设计稿的宽度，一般是750</span><br><span class="line">  viewportHeight: 1334, // 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span><br><span class="line">  unitPrecision: 3, // 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span><br><span class="line">  viewportUnit: &apos;vw&apos;, // 指定需要转换成的视窗单位，建议使用vw</span><br><span class="line">  selectorBlackList: [&apos;.ignore&apos;, &apos;.hairlines&apos;], // 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span><br><span class="line">  minPixelValue: 1, // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span><br><span class="line">  mediaQuery: false, // 允许在媒体查询中转换`px`</span><br><span class="line">  exclude: /(\/|\\)(node_modules)(\/|\\)/</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/36913200" target="_blank" rel="noopener">Vue+ts下的移动端vw适配（第三方库css问题）</a><br><a href="https://www.w3cplus.com/css/vw-for-layout.html" target="_blank" rel="noopener">再聊移动端页面的适配</a><br><a href="https://www.w3cplus.com/mobile/vw-layout-in-vue.html" target="_blank" rel="noopener">如何在Vue项目中使用vw实现移动端适配</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-安装并配置PostCss插件&quot;&gt;&lt;a href=&quot;#1-安装并配置PostCss插件&quot; class=&quot;headerlink&quot; title=&quot;1. 安装并配置PostCss插件&quot;&gt;&lt;/a&gt;1. 安装并配置PostCss插件&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano --S&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还需要安装 cssnano-preset-advanced&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i cssnano-preset-advanced --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue.js" scheme="https://note.52admin.net/tags/Vue-js/"/>
    
      <category term="vw" scheme="https://note.52admin.net/tags/vw/"/>
    
  </entry>
  
  <entry>
    <title>使用Github的 WebHooks 进行网站自动化部署</title>
    <link href="https://note.52admin.net/2018/08/20/%E4%BD%BF%E7%94%A8Github%E7%9A%84-WebHooks-%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%AB%99%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>https://note.52admin.net/2018/08/20/使用Github的-WebHooks-进行网站自动化部署/</id>
    <published>2018-08-20T09:50:10.000Z</published>
    <updated>2019-01-08T03:04:39.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>利用Github在仓库进行操作时，可以通过配置webhook向服务器发送请求，在服务器端接到请求后，使用脚本来自动进行git pull操作。</p><p><img src="https://wx3.sinaimg.cn/large/85f4065cgy1ftv5b4a0coj20uy0ly43u.jpg" alt="image"></p><a id="more"></a><p><a href="https://www.xiajunyi.com/pages/p41.html" target="_blank" rel="noopener">图片来源：Github的webhook触发vps上的脚本</a></p><h2 id="构建-Webhook-服务"><a href="#构建-Webhook-服务" class="headerlink" title="构建 Webhook 服务"></a>构建 Webhook 服务</h2><p>通过执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g github-webhook-handler</span><br></pre></td></tr></table></figure></p><p>来安装  github-webhook-handler 中间件</p><p>新建文件 <code>webhook.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</span><br><span class="line"><span class="keyword">var</span> handler = createHandler(&#123; <span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">secret</span>: <span class="string">'root'</span> &#125;)</span><br><span class="line"><span class="comment">// 上面的 secret 保持和 GitHub 后台设置的一致</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run_cmd</span>(<span class="params">cmd, args, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line">  <span class="keyword">var</span> child = spawn(cmd, args);</span><br><span class="line">  <span class="keyword">var</span> resp = <span class="string">""</span>;</span><br><span class="line">  child.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123; resp += buffer.toString(); &#125;);</span><br><span class="line">  child.stdout.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; callback (resp) &#125;);</span><br><span class="line">&#125;</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    res.statusCode = <span class="number">404</span></span><br><span class="line">    res.end(<span class="string">'no such location'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).listen(<span class="number">7777</span>)</span><br><span class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</span><br><span class="line">&#125;)</span><br><span class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">    event.payload.repository.name,</span><br><span class="line">    event.payload.ref);</span><br><span class="line">    run_cmd(<span class="string">'sh'</span>, [<span class="string">'./deploy.sh'</span>,event.payload.repository.name], <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123; <span class="built_in">console</span>.log(text) &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var handler = createHandler(&#123; path: &apos;/&apos;, secret: &apos;root&apos; &#125;)</span><br></pre></td></tr></table></figure></p><p><code>secret</code> 字段为 Github 中设置的，需要与这里相对应</p><blockquote><p>注意，在运行的时候如果提示 <code>github-webhook-handler is not defined</code> 未找到 ，可以在目录中执行 <code>npm link github-webhook-handler</code></p></blockquote><h2 id="同一服务多个-webhook"><a href="#同一服务多个-webhook" class="headerlink" title="同一服务多个 webhook"></a>同一服务多个 webhook</h2><p>当你有多个仓库需要自动部署时，可以在一个服务上开启多个 webhook。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'node-github-webhook'</span>)</span><br><span class="line"><span class="keyword">var</span> handler = createHandler([ <span class="comment">// 多个仓库</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/app1'</span>,</span><br><span class="line">    secret: <span class="string">'CUSTOM'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/app2'</span>,</span><br><span class="line">    secret: <span class="string">'CUSTOM'</span></span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// var handler = createHandler(&#123; path: '/webhook1', secret: 'secret1' &#125;) // 单个仓库</span></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  handler(req, res, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; </span><br><span class="line">    res.statusCode = <span class="number">404</span></span><br><span class="line">    res.end(<span class="string">'no such location'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).listen(<span class="number">7777</span>)</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(</span><br><span class="line">    <span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">    event.payload.repository.name,</span><br><span class="line">    event.payload.ref</span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">switch</span> (event.path) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/app1'</span>:</span><br><span class="line">      runCmd(<span class="string">'sh'</span>, [<span class="string">'./app1_deploy.sh'</span>, event.payload.repository.name], <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123; <span class="built_in">console</span>.log(text) &#125;)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'/app2'</span>:</span><br><span class="line">      runCmd(<span class="string">'sh'</span>, [<span class="string">'./app2_deploy.sh'</span>, event.payload.repository.name], <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123; <span class="built_in">console</span>.log(text) &#125;)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="comment">// 处理其他</span></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runCmd</span> (<span class="params">cmd, args, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn</span><br><span class="line">  <span class="keyword">var</span> child = spawn(cmd, args)</span><br><span class="line">  <span class="keyword">var</span> resp = <span class="string">''</span></span><br><span class="line">  child.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    resp += buffer.toString()</span><br><span class="line">  &#125;)</span><br><span class="line">  child.stdout.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    callback(resp)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>同一服务多个webhook时，最终你的payload URL 则为：<code>http:/yourdomain:7777/app1</code> 或者 <code>http:/yourdomain:7777/app2</code> ，注意我在实践过程中发现，不能使用 / 目录，会无法监听到 webhook。</p></blockquote><p>参考地址：<a href="https://github.com/rvagg/github-webhook-handler/pull/22#issuecomment-274301907" target="_blank" rel="noopener">https://github.com/rvagg/github-webhook-handler/pull/22#issuecomment-274301907</a></p><h2 id="完成-shell-脚本"><a href="#完成-shell-脚本" class="headerlink" title="完成 shell 脚本"></a>完成 shell 脚本</h2><p>在使用脚本之前，先要对网站根目录做一些处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 打开网站根目录</span><br><span class="line">cd /home/wwwroot/domain.com</span><br><span class="line"># 采用 Git 文件控制</span><br><span class="line">git init</span><br><span class="line"># 添加远程 Git 仓库地址</span><br><span class="line">git remote add origin https://xx.git</span><br></pre></td></tr></table></figure><p>参考地址：<br><a href="https://stackoverflow.com/questions/1125968/how-do-i-force-git-pull-to-overwrite-local-files" target="_blank" rel="noopener">How do I force “git pull” to overwrite local files?</a></p><p>然后再创建 <code>deploy.sh</code>，与 <code>webhook.js</code> 在同一个目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 网站的根目录</span></span><br><span class="line">WEB_PATH=<span class="string">'/home/wwwroot/domain.com'</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"start deployment"</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WEB_PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"fetching from remote..."</span></span><br><span class="line"><span class="comment"># 为了避免冲突，强制更新本地文件</span></span><br><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"done"</span></span><br></pre></td></tr></table></figure><blockquote><p>由于 Linux 文件权限问题，可能无法执行，建议先执行 <code>chmod 777 ./deploy.sh</code></p></blockquote><h2 id="使用pm2进行进程守护"><a href="#使用pm2进行进程守护" class="headerlink" title="使用pm2进行进程守护"></a>使用pm2进行进程守护</h2><p>安装pm2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pm2 -g</span><br></pre></td></tr></table></figure></p><p>运行webhook.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start webhook.js</span><br></pre></td></tr></table></figure></p><h2 id="进入Gtihub后台进行设置"><a href="#进入Gtihub后台进行设置" class="headerlink" title="进入Gtihub后台进行设置"></a>进入Gtihub后台进行设置</h2><p>进入需要自动部署的项目的github地址添加webhook，进入Settings设置页面，点击左侧的 Webhooks</p><p><img src="https://wx2.sinaimg.cn/large/85f4065cgy1ftv4wb3sbsj21jy172gtd.jpg" alt="image"></p><p>参考地址：</p><p><a href="http://zhuxiblog.com/2017/03/13/Github-webhook-vps/" target="_blank" rel="noopener">利用Github的Webhook进行静态网站的自动化部署</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;利用Github在仓库进行操作时，可以通过配置webhook向服务器发送请求，在服务器端接到请求后，使用脚本来自动进行git pull操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wx3.sinaimg.cn/large/85f4065cgy1ftv5b4a0coj20uy0ly43u.jpg&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Webhooks" scheme="https://note.52admin.net/tags/Webhooks/"/>
    
      <category term="Github" scheme="https://note.52admin.net/tags/Github/"/>
    
  </entry>
  
</feed>
